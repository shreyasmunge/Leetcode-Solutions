#SOLUTION 1 {TIME COMPLEXITY == O(N)2}

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):                                  #i from 0 to last element
            for j in range(i+1, len(nums)):                         #j from i+1 to last element
                if target-nums[j]==nums[i]:                         #check if target-a==b (instead of a+b==target)
                    return [i, j]
                    
                    
                    
                    
#SOLUTION 2 {TIME COMPLEXITY==O(N)}


class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen={}                                                   #created a dictonary named seen
        for i,value in enumerate(nums):                           #enumerate function helps to use index and values by iterating once
            remaining=target-nums[i]                              #sum-b=a
            if remaining not in seen:                             # if sum not in seen then add
                seen[value]=i
            else:
                return [i, seen[remaining]]                       #if present return index of current and sum
        
