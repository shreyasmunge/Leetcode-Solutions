# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def dfs(node,min_val,max_val):
            if not node:
                return True
            if not min_val <node.val<max_val:
                return False
            return dfs(node.left,min_val,node.val) and dfs(node.right,node.val,max_val)
        return dfs(root,float('-inf'),float('inf'))




#Solution 2
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def dfs(node,res):
            if not node:
                return 
            dfs(node.left,res)
            res.append(node.val)
            dfs(node.right,res)
            return res
        res = []
        dfs(root,res)
        for i in range(1,len(res)):
            if res[i]<=res[i-1]:
                return False
        return True
