Solution 1 : (Boyers Moore voting algo) with O(n) time and O(1) space.
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        #Boyer-Moore Voting algo
        count = 0
        cur_maj = None
        for num in nums:#find majority ele
            if count == 0:
                cur_maj = num
            if cur_maj == num:
                count+=1
            else:
                count-=1
        n = len(nums)
        if nums.count(cur_maj)>=n//2: #verify majority ele
            return cur_maj
            


Solution 2:O(n) time and space
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        store={}                                                  #empty dict
        for i in range(0,len(nums)):
            if nums[i] not in store:                              #insert element in dict with their count
                store[nums[i]]=1
            else:
                store[nums[i]]+=1
        maj=len(nums)//2
        for key,value in store.items():                            #iterat dict 
            if value>maj:                                         
                return key
