class MyCircularQueue:

    def __init__(self, k: int):
        self.queue = [0]*k
        self.count = 0
        self.front = 0
        self.rear = 0
        self.n = k

    def enQueue(self, value: int) -> bool:
        if self.count<self.n:
            self.queue[self.rear%self.n]=value
            self.count+=1
            self.rear=(self.rear+1)%self.n
            return True

    def deQueue(self) -> bool:
        if self.count>0:
            self.front=(self.front+1)%self.n
            self.count-=1
            return True
        

    def Front(self) -> int:
        if self.count>0:
            return self.queue[self.front]
        else:
            return -1
        

    def Rear(self) -> int:
        if self.count>0:
            return self.queue[self.rear-1] #rear-1 as rear always point to next position 
        else:
            return -1
        

    def isEmpty(self) -> bool:
        if self.count==0:
            return True
        else:
            return False
        

    def isFull(self) -> bool:
        if self.count==self.n:
            return True
        else:
            False
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
