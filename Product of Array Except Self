Solution 1 : 
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        cur_product = 1
        lis = [1] * len(nums)
        #prefix product is stored in lis, for current pos
        for i in range(1,len(nums)):
            lis[i] = cur_product *nums[i-1] #find prefix
            cur_product = lis[i]
        cur_product = 1
        #suffix product for current pos is multiplyed with prefix prodcut 
        for i in range(len(nums)-2,-1,-1):
            cur_product = cur_product *nums[i+1] #find suffix
            lis[i]*=cur_product #prefix * suffiex
        return lis



Solutino 2:
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n=len(nums)
        leftside=[1]*n
        rightside=[1]*n
        answer=[1]*n
        for i in range(1,n):
            leftside[i]=leftside[i-1]*nums[i-1]
        for i in range(n-2,-1,-1):
            rightside[i]=rightside[i+1]*nums[i+1]
        for i in range(n):
            answer[i]=leftside[i]*rightside[i]
        return answer
            
