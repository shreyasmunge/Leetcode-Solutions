class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        #usign slow-fast pointer
        slow=fast=nums[0]
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]] #as the value of ele in array is in range of [1,n]
            if slow == fast:        #if means there is duplicate and cycle
                break
        #now find dup
        slow = nums[0]
        while slow!=fast:
            slow = nums[slow]
            fast = nums[fast]
        return slow






class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        store={}
        for i in range(len(nums)):
            if nums[i] not in store:
                store[nums[i]]=1
            else:
                store[nums[i]]+=1
        for key,value in store.items():
            if value>=2:
                return key
