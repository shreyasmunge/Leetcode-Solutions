Solution 1 : Using DFS
class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        visited = [False]*len(graph)
        check = [0] *len(graph)
        path = [False]*len(graph)
        lis = []
        #if no cycle then mark 
        def dfs(i,visited,path,check):
            visited[i] = True
            path[i] = True
            check[i] = 0
            #if not visited then do dfs and if cycle found mark found or if already present in path mark found 
            for neighbour in graph[i]:
                if not visited[neighbour]:
                    if dfs(neighbour,visited,path,check)==True:
                        check[neighbour] = 0
                        return True
                    
                elif  path[neighbour]:
                    check[neighbour] = 0
                    return True

            check[i] = 1   
            path[i] = False
            
            return False

        for i in range(len(graph)):
            if not visited[i]:
                dfs(i,visited,path,check)
        for i in range(len(check)):
            if check[i] == 1:
                lis.append(i)
                   
                  
        return lis





Solution 2 : Using BFS(topo sort) 

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        indegree = [0]*numCourses #to keep track of vertices with 0 indegree
        queue = []
        adjacent = [[] for _ in range(numCourses)]
        topo = []
        #convert to adjacency list
        for i in range(len(prerequisites)):
            adjacent[prerequisites[i][1]].append(prerequisites[i][0])
        #count indegree for each vertice and add to a list
        for i in range(len(adjacent)):
            for j in range(len(adjacent[i])):
                indegree[adjacent[i][j]]+=1
        #if indegree is 0 , append to queue
        for i in range(len(indegree)):
            if indegree[i]==0:
                queue.append(i)
        #while queue not emepty, pop ele and it is topo sort oreder, iterate to all connections of poped vertice also update its indegree if 0 add to queue
        while queue:
            node = queue.pop(0)
            topo.append(node)
            for i in range(len(adjacent[node])):
                neighbour = adjacent[node][i]
                indegree[neighbour]-=1
                if indegree[neighbour]==0:
                    queue.append(neighbour)
        #the len(topo) should be equal to no.of vertices
        return len(topo)==numCourses



        
        
