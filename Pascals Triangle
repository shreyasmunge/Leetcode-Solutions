Solution 1:
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        def pascal(numRows):
            if numRows == 0: #base case
                return [[]]
            if numRows == 1:
                return [[1]]
            pre_rows = pascal(numRows-1) #store in call stack(recursive case)
            curr_row = [1] * numRows
            for i in range(1,numRows-1):
                curr_row[i] = pre_rows[-1][i-1]+pre_rows[-1][i]
            pre_rows.append(curr_row)
            return pre_rows
        return pascal(numRows)


Solution 2 :
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        res = []
        row = [1]
        res.append([1])
        for i in range(numRows-1):
            newRow = [1]
            for j in range(i):
                newRow.append(res[-1][j]+res[-1][j+1])
            newRow.append(1)
            res.append(newRow)
        return res

        
