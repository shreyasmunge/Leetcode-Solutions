"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        if not node :
            return None
        graph = {}
        queue = [node]
        graph[node] = Node(node.val)
        while queue:
            ele = queue.pop(0)
            for neighbour in ele.neighbors:
                if neighbour not in graph:
                    graph[neighbour] = Node(neighbour.val)
                    queue.append(neighbour)
                graph[ele].neighbors.append(graph[neighbour])
        return graph[node]

        
