# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        def dfs(node,res):
            if not node or res[0]>=k:
                return
            dfs(node.left,res)
            res[0]+=1
            if res[0]==k:
                res[1] = node.val
                return
            dfs(node.right,res)
        res = [0,0]
        dfs(root,res)
        return res[1]
       


#Solution 2

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        def dfs(node,res):
            if not node:
                return
            dfs(node.left,res)
            res.append(node.val)
            dfs(node.right,res)
            return res
        res = []
        dfs(root,res)
        return res[k-1]
        
