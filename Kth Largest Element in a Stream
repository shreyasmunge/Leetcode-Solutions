import heapq
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.pq = []
        #if size overflow then we are remove least val 
        for num in nums:
            heapq.heappush(self.pq,num)
            if len(self.pq)>k:
                heapq.heappop(self.pq)
    #if overflow the size return then kth largest ele after adding new ele 
    def add(self, val: int) -> int:
        heapq.heappush(self.pq,val)
        if len(self.pq)>self.k:
            heapq.heappop(self.pq)
        return self.pq[0]

        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
