# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        map = {}
        for i in range(len(inorder)):
            map[inorder[i]] = i
        def dfs(post_start,post_end,in_start,in_end):
            if post_start>post_end or in_start>in_end:
                return None
            node_val = postorder[post_end]
            node = TreeNode(node_val)
            mid = map[node_val]
            left_in_size = mid -in_start
            node.left = dfs(post_start,post_start+left_in_size-1,in_start,mid-1)
            node.right = dfs(post_start+left_in_size,post_end-1,mid+1,in_end)
            return node
        return dfs(0,len(postorder)-1,0,len(inorder)-1)





# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        map = {}
        for i in range(len(inorder)):
            map[inorder[i]] = i
        def dfs(post_start,post_end,in_start,in_end):
            if post_start>post_end or in_start>in_end:
                return None
            node_val = postorder[post_end]
            node = TreeNode(node_val)
            mid = map[node_val]
            left_in_size = mid -in_start
            node.left = dfs(post_start,post_start+left_in_size-1,in_start,mid-1)
            node.right = dfs(post_start+left_in_size,post_end-1,mid+1,in_end)
            return node
        return dfs(0,len(postorder)-1,0,len(inorder)-1)
